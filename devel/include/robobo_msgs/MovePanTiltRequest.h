// Generated by gencpp from file robobo_msgs/MovePanTiltRequest.msg
// DO NOT EDIT!


#ifndef ROBOBO_MSGS_MESSAGE_MOVEPANTILTREQUEST_H
#define ROBOBO_MSGS_MESSAGE_MOVEPANTILTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int16.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Int16.h>

namespace robobo_msgs
{
template <class ContainerAllocator>
struct MovePanTiltRequest_
{
  typedef MovePanTiltRequest_<ContainerAllocator> Type;

  MovePanTiltRequest_()
    : panPos()
    , panSpeed()
    , panUnlockId()
    , tiltPos()
    , tiltSpeed()
    , tiltUnlockId()  {
    }
  MovePanTiltRequest_(const ContainerAllocator& _alloc)
    : panPos(_alloc)
    , panSpeed(_alloc)
    , panUnlockId(_alloc)
    , tiltPos(_alloc)
    , tiltSpeed(_alloc)
    , tiltUnlockId(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Int16_<ContainerAllocator>  _panPos_type;
  _panPos_type panPos;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _panSpeed_type;
  _panSpeed_type panSpeed;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _panUnlockId_type;
  _panUnlockId_type panUnlockId;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _tiltPos_type;
  _tiltPos_type tiltPos;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _tiltSpeed_type;
  _tiltSpeed_type tiltSpeed;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _tiltUnlockId_type;
  _tiltUnlockId_type tiltUnlockId;





  typedef boost::shared_ptr< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MovePanTiltRequest_

typedef ::robobo_msgs::MovePanTiltRequest_<std::allocator<void> > MovePanTiltRequest;

typedef boost::shared_ptr< ::robobo_msgs::MovePanTiltRequest > MovePanTiltRequestPtr;
typedef boost::shared_ptr< ::robobo_msgs::MovePanTiltRequest const> MovePanTiltRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robobo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'robobo_msgs': ['/root/projects/src/robobo_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e02b68971ce7a0ff6df448c278f194a2";
  }

  static const char* value(const ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe02b68971ce7a0ffULL;
  static const uint64_t static_value2 = 0x6df448c278f194a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robobo_msgs/MovePanTiltRequest";
  }

  static const char* value(const ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Int16 panPos\n\
std_msgs/Int8 panSpeed\n\
std_msgs/Int16 panUnlockId\n\
std_msgs/Int16 tiltPos\n\
std_msgs/Int8 tiltSpeed\n\
std_msgs/Int16 tiltUnlockId\n\
\n\
================================================================================\n\
MSG: std_msgs/Int16\n\
int16 data\n\
\n\
================================================================================\n\
MSG: std_msgs/Int8\n\
int8 data\n\
";
  }

  static const char* value(const ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.panPos);
      stream.next(m.panSpeed);
      stream.next(m.panUnlockId);
      stream.next(m.tiltPos);
      stream.next(m.tiltSpeed);
      stream.next(m.tiltUnlockId);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MovePanTiltRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robobo_msgs::MovePanTiltRequest_<ContainerAllocator>& v)
  {
    s << indent << "panPos: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.panPos);
    s << indent << "panSpeed: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.panSpeed);
    s << indent << "panUnlockId: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.panUnlockId);
    s << indent << "tiltPos: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.tiltPos);
    s << indent << "tiltSpeed: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.tiltSpeed);
    s << indent << "tiltUnlockId: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.tiltUnlockId);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOBO_MSGS_MESSAGE_MOVEPANTILTREQUEST_H
