# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robobo_msgs/Wheels.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Wheels(genpy.Message):
  _md5sum = "e3007c5c2ec7faa3f8f71bd3a0d670c5"
  _type = "robobo_msgs/Wheels"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Int64 wheelPosR
std_msgs/Int64 wheelPosL
std_msgs/Int64 wheelSpeedR
std_msgs/Int64 wheelSpeedL

================================================================================
MSG: std_msgs/Int64
int64 data"""
  __slots__ = ['wheelPosR','wheelPosL','wheelSpeedR','wheelSpeedL']
  _slot_types = ['std_msgs/Int64','std_msgs/Int64','std_msgs/Int64','std_msgs/Int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       wheelPosR,wheelPosL,wheelSpeedR,wheelSpeedL

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Wheels, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.wheelPosR is None:
        self.wheelPosR = std_msgs.msg.Int64()
      if self.wheelPosL is None:
        self.wheelPosL = std_msgs.msg.Int64()
      if self.wheelSpeedR is None:
        self.wheelSpeedR = std_msgs.msg.Int64()
      if self.wheelSpeedL is None:
        self.wheelSpeedL = std_msgs.msg.Int64()
    else:
      self.wheelPosR = std_msgs.msg.Int64()
      self.wheelPosL = std_msgs.msg.Int64()
      self.wheelSpeedR = std_msgs.msg.Int64()
      self.wheelSpeedL = std_msgs.msg.Int64()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4q().pack(_x.wheelPosR.data, _x.wheelPosL.data, _x.wheelSpeedR.data, _x.wheelSpeedL.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.wheelPosR is None:
        self.wheelPosR = std_msgs.msg.Int64()
      if self.wheelPosL is None:
        self.wheelPosL = std_msgs.msg.Int64()
      if self.wheelSpeedR is None:
        self.wheelSpeedR = std_msgs.msg.Int64()
      if self.wheelSpeedL is None:
        self.wheelSpeedL = std_msgs.msg.Int64()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.wheelPosR.data, _x.wheelPosL.data, _x.wheelSpeedR.data, _x.wheelSpeedL.data,) = _get_struct_4q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4q().pack(_x.wheelPosR.data, _x.wheelPosL.data, _x.wheelSpeedR.data, _x.wheelSpeedL.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.wheelPosR is None:
        self.wheelPosR = std_msgs.msg.Int64()
      if self.wheelPosL is None:
        self.wheelPosL = std_msgs.msg.Int64()
      if self.wheelSpeedR is None:
        self.wheelSpeedR = std_msgs.msg.Int64()
      if self.wheelSpeedL is None:
        self.wheelSpeedL = std_msgs.msg.Int64()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.wheelPosR.data, _x.wheelPosL.data, _x.wheelSpeedR.data, _x.wheelSpeedL.data,) = _get_struct_4q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4q = None
def _get_struct_4q():
    global _struct_4q
    if _struct_4q is None:
        _struct_4q = struct.Struct("<4q")
    return _struct_4q
